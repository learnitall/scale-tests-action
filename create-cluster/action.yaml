name: 'Create kops cluster'
description: "Workflow that creates kops cluster"
inputs:
  cloud:
    description: "Cloud provider to use. Can be one of: gce, aws"
    required: true
  cluster_name:
    description: "Name of the cluster to create"
    required: true
  control_plane_size:
    description: "Control plane node size"
    required: true
  control_plane_count:
    description: "Number of control plane nodes"
    required: true
  node_size:
    description: "Node size"
    required: true
  node_count:
    description: "Number of nodes"
    required: true
  kops_state:
    description: "Bucket where to store kops state"
    required: true
  project_id:
    description: "GCP Project in which to create cluster. Only required if cloud=gce"
    required: false
runs:
  using: "composite"
  steps:
    - name: Create cluster
      shell: bash
      run: |
        cloud_opts=""

        if [ "${{ inputs.cloud }}" = "gce" ]; then
          if [ -z "${{ inputs.project_id }}" ]; then
            echo "project_id required when cloud set to gce"
            exit 1
          fi
          cloud_opts="--project ${{ inputs.project_id }}"
        fi

        ./kops create cluster \
          ${{ inputs.cluster_name }} \
          --cloud ${{ inputs.cloud }} \
          --state ${{ inputs.kops_state }} \
          --zones us-west1-a \
          --control-plane-count ${{ inputs.control_plane_count }} \
          --control-plane-size ${{ inputs.control_plane_size }} \
          --node-count ${{ inputs.node_count }} \
          --node-size ${{ inputs.node_size }} \
          --networking cni \
          --set spec.kubeAPIServer.anonymousAuth=true \
          --set spec.networking.subnets[0].cidr=10.16.0.0/16 \
          --set spec.etcdClusters[0].manager.listenMetricsURLs=http://localhost:2382 \
          --set spec.kubeAPIServer.enableContentionProfiling=true \
          --set spec.kubeAPIServer.enableProfiling=true \
          --set spec.kubeControllerManager.enableContentionProfiling=true \
          --set spec.kubeControllerManager.enableProfiling=true \
          --set spec.kubeScheduler.enableContentionProfiling=true \
          --set spec.kubeScheduler.enableProfiling=true \
          --set spec.kubeScheduler.authorizationAlwaysAllowPaths=/metrics \
          --set spec.kubeSchedulAer.authorizationAlwaysAllowPaths=/healthz \
          $cloud_opts \
          --yes

    - name: Dump cluster config
      shell: bash
      run: |
        ./kops get clusters \
          ${{ inputs.cluster_name }} \
          --state ${{ inputs.kops_state }} \
          -o yaml

    - name: Ensure cluster state matches config
      shell: bash
      run: |
        ./kops update cluster \
          ${{ inputs.cluster_name }} \
          --state ${{ inputs.kops_state }} \
          --yes

    - name: Get kubeconfig
      shell: bash
      run: |
        ./kops export kubeconfig \
          ${{ inputs.cluster_name }} \
          --state ${{ inputs.kops_state }} \
          --admin

    - name: Wait for cluster control plane
      shell: bash
      run: |
        until kubectl get nodes; do sleep 45s; done
